
ECSE 444 Lab 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003584  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003780  08003780  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003780  08003780  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003780  08003780  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08003794  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003794  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090ef  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ff  00000000  00000000  0002912b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0002a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002b120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f03  00000000  00000000  0002b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000942f  00000000  00000000  0005585b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b82  00000000  00000000  0005ec8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016680c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  0016685c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003728 	.word	0x08003728

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003728 	.word	0x08003728

080001fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000206:	2003      	movs	r0, #3
 8000208:	f001 f9c6 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f80d 	bl	800022c <HAL_InitTick>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e001      	b.n	8000222 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800021e:	f003 f989 	bl	8003534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000222:	79fb      	ldrb	r3, [r7, #7]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_InitTick+0x6c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d023      	beq.n	8000288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_InitTick+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <HAL_InitTick+0x6c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000252:	fbb2 f3f3 	udiv	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f001 f9c5 	bl	80015e6 <HAL_SYSTICK_Config>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10f      	bne.n	8000282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d809      	bhi.n	800027c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000268:	2200      	movs	r2, #0
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	f04f 30ff 	mov.w	r0, #4294967295
 8000270:	f001 f99d 	bl	80015ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_InitTick+0x74>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e004      	b.n	800028c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x20>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_IncTick+0x24>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_IncTick+0x24>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000028 	.word	0x20000028

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <HAL_GetTick+0x14>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	609a      	str	r2, [r3, #8]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr

0800030a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800030a:	b480      	push	{r7}
 800030c:	b083      	sub	sp, #12
 800030e:	af00      	add	r7, sp, #0
 8000310:	6078      	str	r0, [r7, #4]
 8000312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	431a      	orrs	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	609a      	str	r2, [r3, #8]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000340:	4618      	mov	r0, r3
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800034c:	b480      	push	{r7}
 800034e:	b087      	sub	sp, #28
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3360      	adds	r3, #96	; 0x60
 800035e:	461a      	mov	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	4413      	add	r3, r2
 8000366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <LL_ADC_SetOffset+0x44>)
 800036e:	4013      	ands	r3, r2
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000376:	683a      	ldr	r2, [r7, #0]
 8000378:	430a      	orrs	r2, r1
 800037a:	4313      	orrs	r3, r2
 800037c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000384:	bf00      	nop
 8000386:	371c      	adds	r7, #28
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	03fff000 	.word	0x03fff000

08000394 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3360      	adds	r3, #96	; 0x60
 80003a2:	461a      	mov	r2, r3
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	4413      	add	r3, r2
 80003aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b087      	sub	sp, #28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3360      	adds	r3, #96	; 0x60
 80003d0:	461a      	mov	r2, r3
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	431a      	orrs	r2, r3
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003ea:	bf00      	nop
 80003ec:	371c      	adds	r7, #28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	431a      	orrs	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	615a      	str	r2, [r3, #20]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800042c:	2b00      	cmp	r3, #0
 800042e:	d101      	bne.n	8000434 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000430:	2301      	movs	r3, #1
 8000432:	e000      	b.n	8000436 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000434:	2300      	movs	r3, #0
}
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000442:	b480      	push	{r7}
 8000444:	b087      	sub	sp, #28
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3330      	adds	r3, #48	; 0x30
 8000452:	461a      	mov	r2, r3
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	f003 030c 	and.w	r3, r3, #12
 800045e:	4413      	add	r3, r2
 8000460:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	f003 031f 	and.w	r3, r3, #31
 800046c:	211f      	movs	r1, #31
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	43db      	mvns	r3, r3
 8000474:	401a      	ands	r2, r3
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	0e9b      	lsrs	r3, r3, #26
 800047a:	f003 011f 	and.w	r1, r3, #31
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	f003 031f 	and.w	r3, r3, #31
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	431a      	orrs	r2, r3
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800048e:	bf00      	nop
 8000490:	371c      	adds	r7, #28
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800049a:	b480      	push	{r7}
 800049c:	b087      	sub	sp, #28
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3314      	adds	r3, #20
 80004aa:	461a      	mov	r2, r3
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	0e5b      	lsrs	r3, r3, #25
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	f003 0304 	and.w	r3, r3, #4
 80004b6:	4413      	add	r3, r2
 80004b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	0d1b      	lsrs	r3, r3, #20
 80004c2:	f003 031f 	and.w	r3, r3, #31
 80004c6:	2107      	movs	r1, #7
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	401a      	ands	r2, r3
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	0d1b      	lsrs	r3, r3, #20
 80004d4:	f003 031f 	and.w	r3, r3, #31
 80004d8:	6879      	ldr	r1, [r7, #4]
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	431a      	orrs	r2, r3
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80004e4:	bf00      	nop
 80004e6:	371c      	adds	r7, #28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000508:	43db      	mvns	r3, r3
 800050a:	401a      	ands	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f003 0318 	and.w	r3, r3, #24
 8000512:	4908      	ldr	r1, [pc, #32]	; (8000534 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000514:	40d9      	lsrs	r1, r3
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	400b      	ands	r3, r1
 800051a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800051e:	431a      	orrs	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	0007ffff 	.word	0x0007ffff

08000538 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	6093      	str	r3, [r2, #8]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	689b      	ldr	r3, [r3, #8]
 8000568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800056c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000570:	d101      	bne.n	8000576 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000598:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80005c0:	d101      	bne.n	80005c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80005c6:	2300      	movs	r3, #0
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80005e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005e8:	f043 0201 	orr.w	r2, r3, #1
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b01      	cmp	r3, #1
 800060e:	d101      	bne.n	8000614 <LL_ADC_IsEnabled+0x18>
 8000610:	2301      	movs	r3, #1
 8000612:	e000      	b.n	8000616 <LL_ADC_IsEnabled+0x1a>
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000632:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000636:	f043 0204 	orr.w	r2, r3, #4
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	2b04      	cmp	r3, #4
 800065c:	d101      	bne.n	8000662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800065e:	2301      	movs	r3, #1
 8000660:	e000      	b.n	8000664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	2b08      	cmp	r3, #8
 8000682:	d101      	bne.n	8000688 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000684:	2301      	movs	r3, #1
 8000686:	e000      	b.n	800068a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d101      	bne.n	80006b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e12f      	b.n	8000912 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d109      	bne.n	80006d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f002 ff5b 	bl	800357c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff3f 	bl	800055c <LL_ADC_IsDeepPowerDownEnabled>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d004      	beq.n	80006ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff25 	bl	8000538 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff5a 	bl	80005ac <LL_ADC_IsInternalRegulatorEnabled>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d115      	bne.n	800072a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff3e 	bl	8000584 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000708:	4b84      	ldr	r3, [pc, #528]	; (800091c <HAL_ADC_Init+0x284>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	099b      	lsrs	r3, r3, #6
 800070e:	4a84      	ldr	r2, [pc, #528]	; (8000920 <HAL_ADC_Init+0x288>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	099b      	lsrs	r3, r3, #6
 8000716:	3301      	adds	r3, #1
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800071c:	e002      	b.n	8000724 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	3b01      	subs	r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f9      	bne.n	800071e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff3c 	bl	80005ac <LL_ADC_IsInternalRegulatorEnabled>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10d      	bne.n	8000756 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	f043 0210 	orr.w	r2, r3, #16
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800074a:	f043 0201 	orr.w	r2, r3, #1
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff75 	bl	800064a <LL_ADC_REG_IsConversionOngoing>
 8000760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 80c8 	bne.w	8000900 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	2b00      	cmp	r3, #0
 8000774:	f040 80c4 	bne.w	8000900 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000780:	f043 0202 	orr.w	r2, r3, #2
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff35 	bl	80005fc <LL_ADC_IsEnabled>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10b      	bne.n	80007b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000798:	4862      	ldr	r0, [pc, #392]	; (8000924 <HAL_ADC_Init+0x28c>)
 800079a:	f7ff ff2f 	bl	80005fc <LL_ADC_IsEnabled>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d105      	bne.n	80007b0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	485f      	ldr	r0, [pc, #380]	; (8000928 <HAL_ADC_Init+0x290>)
 80007ac:	f7ff fd9a 	bl	80002e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7e5b      	ldrb	r3, [r3, #25]
 80007b4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007ba:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80007c0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80007c6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007d0:	4313      	orrs	r3, r2
 80007d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d106      	bne.n	80007ec <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e2:	3b01      	subs	r3, #1
 80007e4:	045b      	lsls	r3, r3, #17
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d009      	beq.n	8000808 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	4313      	orrs	r3, r2
 8000806:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68da      	ldr	r2, [r3, #12]
 800080e:	4b47      	ldr	r3, [pc, #284]	; (800092c <HAL_ADC_Init+0x294>)
 8000810:	4013      	ands	r3, r2
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	69b9      	ldr	r1, [r7, #24]
 8000818:	430b      	orrs	r3, r1
 800081a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff12 	bl	800064a <LL_ADC_REG_IsConversionOngoing>
 8000826:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff1f 	bl	8000670 <LL_ADC_INJ_IsConversionOngoing>
 8000832:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d140      	bne.n	80008bc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d13d      	bne.n	80008bc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7e1b      	ldrb	r3, [r3, #24]
 8000848:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800084a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000852:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000862:	f023 0306 	bic.w	r3, r3, #6
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	69b9      	ldr	r1, [r7, #24]
 800086c:	430b      	orrs	r3, r1
 800086e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000876:	2b01      	cmp	r3, #1
 8000878:	d118      	bne.n	80008ac <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	691b      	ldr	r3, [r3, #16]
 8000880:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000884:	f023 0304 	bic.w	r3, r3, #4
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000890:	4311      	orrs	r1, r2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000896:	4311      	orrs	r1, r2
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800089c:	430a      	orrs	r2, r1
 800089e:	431a      	orrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f042 0201 	orr.w	r2, r2, #1
 80008a8:	611a      	str	r2, [r3, #16]
 80008aa:	e007      	b.n	80008bc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	691a      	ldr	r2, [r3, #16]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f022 0201 	bic.w	r2, r2, #1
 80008ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10c      	bne.n	80008de <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f023 010f 	bic.w	r1, r3, #15
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	1e5a      	subs	r2, r3, #1
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	430a      	orrs	r2, r1
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
 80008dc:	e007      	b.n	80008ee <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 020f 	bic.w	r2, r2, #15
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	f023 0303 	bic.w	r3, r3, #3
 80008f6:	f043 0201 	orr.w	r2, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	659a      	str	r2, [r3, #88]	; 0x58
 80008fe:	e007      	b.n	8000910 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000904:	f043 0210 	orr.w	r2, r3, #16
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000910:	7ffb      	ldrb	r3, [r7, #31]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3720      	adds	r7, #32
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	053e2d63 	.word	0x053e2d63
 8000924:	50040000 	.word	0x50040000
 8000928:	50040300 	.word	0x50040300
 800092c:	fff0c007 	.word	0xfff0c007

08000930 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe84 	bl	800064a <LL_ADC_REG_IsConversionOngoing>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d14f      	bne.n	80009e8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800094e:	2b01      	cmp	r3, #1
 8000950:	d101      	bne.n	8000956 <HAL_ADC_Start+0x26>
 8000952:	2302      	movs	r3, #2
 8000954:	e04b      	b.n	80009ee <HAL_ADC_Start+0xbe>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 fce2 	bl	8001328 <ADC_Enable>
 8000964:	4603      	mov	r3, r0
 8000966:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d137      	bne.n	80009de <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000976:	f023 0301 	bic.w	r3, r3, #1
 800097a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800098e:	d106      	bne.n	800099e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000994:	f023 0206 	bic.w	r2, r3, #6
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	65da      	str	r2, [r3, #92]	; 0x5c
 800099c:	e002      	b.n	80009a4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	221c      	movs	r2, #28
 80009aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d007      	beq.n	80009d2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe23 	bl	8000622 <LL_ADC_REG_StartConversion>
 80009dc:	e006      	b.n	80009ec <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80009e6:	e001      	b.n	80009ec <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80009e8:	2302      	movs	r3, #2
 80009ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	d102      	bne.n	8000a0e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e010      	b.n	8000a30 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d007      	beq.n	8000a2c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a20:	f043 0220 	orr.w	r2, r3, #32
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e06f      	b.n	8000b0c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a30:	f7ff fc4c 	bl	80002cc <HAL_GetTick>
 8000a34:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000a36:	e021      	b.n	8000a7c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3e:	d01d      	beq.n	8000a7c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000a40:	f7ff fc44 	bl	80002cc <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d302      	bcc.n	8000a56 <HAL_ADC_PollForConversion+0x60>
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d112      	bne.n	8000a7c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10b      	bne.n	8000a7c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a68:	f043 0204 	orr.w	r2, r3, #4
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	e047      	b.n	8000b0c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	4013      	ands	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0d6      	beq.n	8000a38 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fcbe 	bl	800041c <LL_ADC_REG_IsTriggerSourceSWStart>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d01c      	beq.n	8000ae0 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	7e5b      	ldrb	r3, [r3, #25]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d118      	bne.n	8000ae0 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	d111      	bne.n	8000ae0 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d105      	bne.n	8000ae0 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad8:	f043 0201 	orr.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d104      	bne.n	8000af8 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2208      	movs	r2, #8
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e008      	b.n	8000b0a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d103      	bne.n	8000b0a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0b6      	sub	sp, #216	; 0xd8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d101      	bne.n	8000b52 <HAL_ADC_ConfigChannel+0x22>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e3d5      	b.n	80012fe <HAL_ADC_ConfigChannel+0x7ce>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fd73 	bl	800064a <LL_ADC_REG_IsConversionOngoing>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 83ba 	bne.w	80012e0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d824      	bhi.n	8000bbe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	3b02      	subs	r3, #2
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d81b      	bhi.n	8000bb6 <HAL_ADC_ConfigChannel+0x86>
 8000b7e:	a201      	add	r2, pc, #4	; (adr r2, 8000b84 <HAL_ADC_ConfigChannel+0x54>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000b95 	.word	0x08000b95
 8000b88:	08000b9d 	.word	0x08000b9d
 8000b8c:	08000ba5 	.word	0x08000ba5
 8000b90:	08000bad 	.word	0x08000bad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	220c      	movs	r2, #12
 8000b98:	605a      	str	r2, [r3, #4]
          break;
 8000b9a:	e011      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2212      	movs	r2, #18
 8000ba0:	605a      	str	r2, [r3, #4]
          break;
 8000ba2:	e00d      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2218      	movs	r2, #24
 8000ba8:	605a      	str	r2, [r3, #4]
          break;
 8000baa:	e009      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb2:	605a      	str	r2, [r3, #4]
          break;
 8000bb4:	e004      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2206      	movs	r2, #6
 8000bba:	605a      	str	r2, [r3, #4]
          break;
 8000bbc:	e000      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8000bbe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	6859      	ldr	r1, [r3, #4]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f7ff fc38 	bl	8000442 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd37 	bl	800064a <LL_ADC_REG_IsConversionOngoing>
 8000bdc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fd43 	bl	8000670 <LL_ADC_INJ_IsConversionOngoing>
 8000bea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000bee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 81c1 	bne.w	8000f7a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f040 81bc 	bne.w	8000f7a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c0a:	d10f      	bne.n	8000c2c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	4619      	mov	r1, r3
 8000c18:	f7ff fc3f 	bl	800049a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fbe6 	bl	80003f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8000c2a:	e00e      	b.n	8000c4a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	6819      	ldr	r1, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f7ff fc2e 	bl	800049a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fbd6 	bl	80003f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	f003 0303 	and.w	r3, r3, #3
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d00a      	beq.n	8000c82 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6919      	ldr	r1, [r3, #16]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000c7c:	f7ff fb66 	bl	800034c <LL_ADC_SetOffset>
 8000c80:	e17b      	b.n	8000f7a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fb83 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d10a      	bne.n	8000cae <HAL_ADC_ConfigChannel+0x17e>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fb78 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	0e9b      	lsrs	r3, r3, #26
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	e01e      	b.n	8000cec <HAL_ADC_ConfigChannel+0x1bc>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fb6d 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000cc4:	fa93 f3a3 	rbit	r3, r3
 8000cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ccc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	e004      	b.n	8000cea <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8000ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000ce4:	fab3 f383 	clz	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d105      	bne.n	8000d04 <HAL_ADC_ConfigChannel+0x1d4>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	0e9b      	lsrs	r3, r3, #26
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	e018      	b.n	8000d36 <HAL_ADC_ConfigChannel+0x206>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000d10:	fa93 f3a3 	rbit	r3, r3
 8000d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8000d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8000d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	e004      	b.n	8000d36 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8000d2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d30:	fab3 f383 	clz	r3, r3
 8000d34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d106      	bne.n	8000d48 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fb3c 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fb20 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10a      	bne.n	8000d74 <HAL_ADC_ConfigChannel+0x244>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2101      	movs	r1, #1
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fb15 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	0e9b      	lsrs	r3, r3, #26
 8000d6e:	f003 021f 	and.w	r2, r3, #31
 8000d72:	e01e      	b.n	8000db2 <HAL_ADC_ConfigChannel+0x282>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fb0a 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d8a:	fa93 f3a3 	rbit	r3, r3
 8000d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8000d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000d96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8000d9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8000da2:	2320      	movs	r3, #32
 8000da4:	e004      	b.n	8000db0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8000da6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000daa:	fab3 f383 	clz	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d105      	bne.n	8000dca <HAL_ADC_ConfigChannel+0x29a>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0e9b      	lsrs	r3, r3, #26
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	e018      	b.n	8000dfc <HAL_ADC_ConfigChannel+0x2cc>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8000dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8000de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8000dee:	2320      	movs	r3, #32
 8000df0:	e004      	b.n	8000dfc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8000df2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000df6:	fab3 f383 	clz	r3, r3
 8000dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d106      	bne.n	8000e0e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2200      	movs	r2, #0
 8000e06:	2101      	movs	r1, #1
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fad9 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2102      	movs	r1, #2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fabd 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10a      	bne.n	8000e3a <HAL_ADC_ConfigChannel+0x30a>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fab2 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	0e9b      	lsrs	r3, r3, #26
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	e01e      	b.n	8000e78 <HAL_ADC_ConfigChannel+0x348>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2102      	movs	r1, #2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff faa7 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8000e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8000e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8000e68:	2320      	movs	r3, #32
 8000e6a:	e004      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8000e6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e70:	fab3 f383 	clz	r3, r3
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d105      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x360>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	0e9b      	lsrs	r3, r3, #26
 8000e8a:	f003 031f 	and.w	r3, r3, #31
 8000e8e:	e016      	b.n	8000ebe <HAL_ADC_ConfigChannel+0x38e>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9c:	fa93 f3a3 	rbit	r3, r3
 8000ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8000ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8000ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	e004      	b.n	8000ebe <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8000eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000eb8:	fab3 f383 	clz	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d106      	bne.n	8000ed0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fa78 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fa5c 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <HAL_ADC_ConfigChannel+0x3cc>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2103      	movs	r1, #3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fa51 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	0e9b      	lsrs	r3, r3, #26
 8000ef6:	f003 021f 	and.w	r2, r3, #31
 8000efa:	e017      	b.n	8000f2c <HAL_ADC_ConfigChannel+0x3fc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2103      	movs	r1, #3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fa46 	bl	8000394 <LL_ADC_GetOffsetChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8000f14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f16:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8000f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8000f1e:	2320      	movs	r3, #32
 8000f20:	e003      	b.n	8000f2a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8000f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d105      	bne.n	8000f44 <HAL_ADC_ConfigChannel+0x414>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0e9b      	lsrs	r3, r3, #26
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	e011      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x438>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f54:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8000f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	e003      	b.n	8000f68 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8000f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f62:	fab3 f383 	clz	r3, r3
 8000f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d106      	bne.n	8000f7a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	2103      	movs	r1, #3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fa23 	bl	80003c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fb3c 	bl	80005fc <LL_ADC_IsEnabled>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f040 8140 	bne.w	800120c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	6819      	ldr	r1, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f7ff faa9 	bl	80004f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	4a8f      	ldr	r2, [pc, #572]	; (80011e0 <HAL_ADC_ConfigChannel+0x6b0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	f040 8131 	bne.w	800120c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_ADC_ConfigChannel+0x4a2>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	0e9b      	lsrs	r3, r3, #26
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	2b09      	cmp	r3, #9
 8000fc8:	bf94      	ite	ls
 8000fca:	2301      	movls	r3, #1
 8000fcc:	2300      	movhi	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	e019      	b.n	8001006 <HAL_ADC_ConfigChannel+0x4d6>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8000fe0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fe2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8000fe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8000fea:	2320      	movs	r3, #32
 8000fec:	e003      	b.n	8000ff6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8000fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f003 031f 	and.w	r3, r3, #31
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	bf94      	ite	ls
 8001000:	2301      	movls	r3, #1
 8001002:	2300      	movhi	r3, #0
 8001004:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001006:	2b00      	cmp	r3, #0
 8001008:	d079      	beq.n	80010fe <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <HAL_ADC_ConfigChannel+0x4f6>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0e9b      	lsrs	r3, r3, #26
 800101c:	3301      	adds	r3, #1
 800101e:	069b      	lsls	r3, r3, #26
 8001020:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001024:	e015      	b.n	8001052 <HAL_ADC_ConfigChannel+0x522>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001036:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800103e:	2320      	movs	r3, #32
 8001040:	e003      	b.n	800104a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	fab3 f383 	clz	r3, r3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	069b      	lsls	r3, r3, #26
 800104e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_ADC_ConfigChannel+0x542>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0e9b      	lsrs	r3, r3, #26
 8001064:	3301      	adds	r3, #1
 8001066:	f003 031f 	and.w	r3, r3, #31
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	e017      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x572>
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800108a:	2320      	movs	r3, #32
 800108c:	e003      	b.n	8001096 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800108e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	3301      	adds	r3, #1
 8001098:	f003 031f 	and.w	r3, r3, #31
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	ea42 0103 	orr.w	r1, r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <HAL_ADC_ConfigChannel+0x598>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	0e9b      	lsrs	r3, r3, #26
 80010b8:	3301      	adds	r3, #1
 80010ba:	f003 021f 	and.w	r2, r3, #31
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	051b      	lsls	r3, r3, #20
 80010c6:	e018      	b.n	80010fa <HAL_ADC_ConfigChannel+0x5ca>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80010d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80010da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80010e0:	2320      	movs	r3, #32
 80010e2:	e003      	b.n	80010ec <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80010e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	f003 021f 	and.w	r2, r3, #31
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80010fa:	430b      	orrs	r3, r1
 80010fc:	e081      	b.n	8001202 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001106:	2b00      	cmp	r3, #0
 8001108:	d107      	bne.n	800111a <HAL_ADC_ConfigChannel+0x5ea>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0e9b      	lsrs	r3, r3, #26
 8001110:	3301      	adds	r3, #1
 8001112:	069b      	lsls	r3, r3, #26
 8001114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001118:	e015      	b.n	8001146 <HAL_ADC_ConfigChannel+0x616>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001132:	2320      	movs	r3, #32
 8001134:	e003      	b.n	800113e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3301      	adds	r3, #1
 8001140:	069b      	lsls	r3, r3, #26
 8001142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x636>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0e9b      	lsrs	r3, r3, #26
 8001158:	3301      	adds	r3, #1
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	e017      	b.n	8001196 <HAL_ADC_ConfigChannel+0x666>
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	61fb      	str	r3, [r7, #28]
  return result;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800117e:	2320      	movs	r3, #32
 8001180:	e003      	b.n	800118a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001184:	fab3 f383 	clz	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3301      	adds	r3, #1
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	ea42 0103 	orr.w	r1, r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10d      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x692>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	0e9b      	lsrs	r3, r3, #26
 80011ac:	3301      	adds	r3, #1
 80011ae:	f003 021f 	and.w	r2, r3, #31
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	3b1e      	subs	r3, #30
 80011ba:	051b      	lsls	r3, r3, #20
 80011bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c0:	e01e      	b.n	8001200 <HAL_ADC_ConfigChannel+0x6d0>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	613b      	str	r3, [r7, #16]
  return result;
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d104      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80011da:	2320      	movs	r3, #32
 80011dc:	e006      	b.n	80011ec <HAL_ADC_ConfigChannel+0x6bc>
 80011de:	bf00      	nop
 80011e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	3301      	adds	r3, #1
 80011ee:	f003 021f 	and.w	r2, r3, #31
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	3b1e      	subs	r3, #30
 80011fa:	051b      	lsls	r3, r3, #20
 80011fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001200:	430b      	orrs	r3, r1
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	6892      	ldr	r2, [r2, #8]
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff f947 	bl	800049a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_ADC_ConfigChannel+0x7d8>)
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d06c      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001218:	483c      	ldr	r0, [pc, #240]	; (800130c <HAL_ADC_ConfigChannel+0x7dc>)
 800121a:	f7ff f889 	bl	8000330 <LL_ADC_GetCommonPathInternalCh>
 800121e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <HAL_ADC_ConfigChannel+0x7e0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d127      	bne.n	800127c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800122c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d121      	bne.n	800127c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a35      	ldr	r2, [pc, #212]	; (8001314 <HAL_ADC_ConfigChannel+0x7e4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d157      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001246:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800124a:	4619      	mov	r1, r3
 800124c:	482f      	ldr	r0, [pc, #188]	; (800130c <HAL_ADC_ConfigChannel+0x7dc>)
 800124e:	f7ff f85c 	bl	800030a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <HAL_ADC_ConfigChannel+0x7e8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	099b      	lsrs	r3, r3, #6
 8001258:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_ADC_ConfigChannel+0x7ec>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	099b      	lsrs	r3, r3, #6
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800126c:	e002      	b.n	8001274 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3b01      	subs	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f9      	bne.n	800126e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800127a:	e03a      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a27      	ldr	r2, [pc, #156]	; (8001320 <HAL_ADC_ConfigChannel+0x7f0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d113      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x77e>
 8001286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800128a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_ADC_ConfigChannel+0x7e4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d12a      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800129c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012a4:	4619      	mov	r1, r3
 80012a6:	4819      	ldr	r0, [pc, #100]	; (800130c <HAL_ADC_ConfigChannel+0x7dc>)
 80012a8:	f7ff f82f 	bl	800030a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012ac:	e021      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <HAL_ADC_ConfigChannel+0x7f4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d11c      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80012b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d116      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a12      	ldr	r2, [pc, #72]	; (8001314 <HAL_ADC_ConfigChannel+0x7e4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d111      	bne.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_ADC_ConfigChannel+0x7dc>)
 80012da:	f7ff f816 	bl	800030a <LL_ADC_SetCommonPathInternalCh>
 80012de:	e008      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	f043 0220 	orr.w	r2, r3, #32
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80012fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	37d8      	adds	r7, #216	; 0xd8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	80080000 	.word	0x80080000
 800130c:	50040300 	.word	0x50040300
 8001310:	c7520000 	.word	0xc7520000
 8001314:	50040000 	.word	0x50040000
 8001318:	20000008 	.word	0x20000008
 800131c:	053e2d63 	.word	0x053e2d63
 8001320:	cb840000 	.word	0xcb840000
 8001324:	80000001 	.word	0x80000001

08001328 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f95f 	bl	80005fc <LL_ADC_IsEnabled>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d169      	bne.n	8001418 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <ADC_Enable+0xfc>)
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00d      	beq.n	800136e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e055      	b.n	800141a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f92e 	bl	80005d4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001378:	482b      	ldr	r0, [pc, #172]	; (8001428 <ADC_Enable+0x100>)
 800137a:	f7fe ffd9 	bl	8000330 <LL_ADC_GetCommonPathInternalCh>
 800137e:	4603      	mov	r3, r0
 8001380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <ADC_Enable+0x104>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	099b      	lsrs	r3, r3, #6
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <ADC_Enable+0x108>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	099b      	lsrs	r3, r3, #6
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80013a2:	e002      	b.n	80013aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80013b0:	f7fe ff8c 	bl	80002cc <HAL_GetTick>
 80013b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013b6:	e028      	b.n	800140a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f91d 	bl	80005fc <LL_ADC_IsEnabled>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f901 	bl	80005d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013d2:	f7fe ff7b 	bl	80002cc <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d914      	bls.n	800140a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d00d      	beq.n	800140a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f043 0210 	orr.w	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e007      	b.n	800141a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b01      	cmp	r3, #1
 8001416:	d1cf      	bne.n	80013b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	8000003f 	.word	0x8000003f
 8001428:	50040300 	.word	0x50040300
 800142c:	20000008 	.word	0x20000008
 8001430:	053e2d63 	.word	0x053e2d63

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff47 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff5c 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffb0 	bl	8001554 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	e166      	b.n	80018de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8158 	beq.w	80018d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_GPIO_Init+0x40>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0201 	and.w	r2, r3, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d017      	beq.n	80016de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	6939      	ldr	r1, [r7, #16]
 800172e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0203 	and.w	r2, r3, #3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80b2 	beq.w	80018d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_GPIO_Init+0x2fc>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	4a60      	ldr	r2, [pc, #384]	; (80018fc <HAL_GPIO_Init+0x2fc>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6613      	str	r3, [r2, #96]	; 0x60
 8001780:	4b5e      	ldr	r3, [pc, #376]	; (80018fc <HAL_GPIO_Init+0x2fc>)
 8001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800178c:	4a5c      	ldr	r2, [pc, #368]	; (8001900 <HAL_GPIO_Init+0x300>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017b6:	d02b      	beq.n	8001810 <HAL_GPIO_Init+0x210>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a52      	ldr	r2, [pc, #328]	; (8001904 <HAL_GPIO_Init+0x304>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d025      	beq.n	800180c <HAL_GPIO_Init+0x20c>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a51      	ldr	r2, [pc, #324]	; (8001908 <HAL_GPIO_Init+0x308>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d01f      	beq.n	8001808 <HAL_GPIO_Init+0x208>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a50      	ldr	r2, [pc, #320]	; (800190c <HAL_GPIO_Init+0x30c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d019      	beq.n	8001804 <HAL_GPIO_Init+0x204>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a4f      	ldr	r2, [pc, #316]	; (8001910 <HAL_GPIO_Init+0x310>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d013      	beq.n	8001800 <HAL_GPIO_Init+0x200>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a4e      	ldr	r2, [pc, #312]	; (8001914 <HAL_GPIO_Init+0x314>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00d      	beq.n	80017fc <HAL_GPIO_Init+0x1fc>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a4d      	ldr	r2, [pc, #308]	; (8001918 <HAL_GPIO_Init+0x318>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d007      	beq.n	80017f8 <HAL_GPIO_Init+0x1f8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a4c      	ldr	r2, [pc, #304]	; (800191c <HAL_GPIO_Init+0x31c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_GPIO_Init+0x1f4>
 80017f0:	2307      	movs	r3, #7
 80017f2:	e00e      	b.n	8001812 <HAL_GPIO_Init+0x212>
 80017f4:	2308      	movs	r3, #8
 80017f6:	e00c      	b.n	8001812 <HAL_GPIO_Init+0x212>
 80017f8:	2306      	movs	r3, #6
 80017fa:	e00a      	b.n	8001812 <HAL_GPIO_Init+0x212>
 80017fc:	2305      	movs	r3, #5
 80017fe:	e008      	b.n	8001812 <HAL_GPIO_Init+0x212>
 8001800:	2304      	movs	r3, #4
 8001802:	e006      	b.n	8001812 <HAL_GPIO_Init+0x212>
 8001804:	2303      	movs	r3, #3
 8001806:	e004      	b.n	8001812 <HAL_GPIO_Init+0x212>
 8001808:	2302      	movs	r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x212>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_GPIO_Init+0x212>
 8001810:	2300      	movs	r3, #0
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4093      	lsls	r3, r2
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001822:	4937      	ldr	r1, [pc, #220]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001830:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_GPIO_Init+0x320>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001854:	4a32      	ldr	r2, [pc, #200]	; (8001920 <HAL_GPIO_Init+0x320>)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_GPIO_Init+0x320>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800187e:	4a28      	ldr	r2, [pc, #160]	; (8001920 <HAL_GPIO_Init+0x320>)
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001884:	4b26      	ldr	r3, [pc, #152]	; (8001920 <HAL_GPIO_Init+0x320>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_GPIO_Init+0x320>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_GPIO_Init+0x320>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018d2:	4a13      	ldr	r2, [pc, #76]	; (8001920 <HAL_GPIO_Init+0x320>)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3301      	adds	r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f47f ae91 	bne.w	8001610 <HAL_GPIO_Init+0x10>
  }
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000
 8001904:	48000400 	.word	0x48000400
 8001908:	48000800 	.word	0x48000800
 800190c:	48000c00 	.word	0x48000c00
 8001910:	48001000 	.word	0x48001000
 8001914:	48001400 	.word	0x48001400
 8001918:	48001800 	.word	0x48001800
 800191c:	48001c00 	.word	0x48001c00
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e001      	b.n	8001946 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e002      	b.n	8001978 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001994:	d102      	bne.n	800199c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199a:	e00b      	b.n	80019b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800199e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019aa:	d102      	bne.n	80019b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80019ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b0:	e000      	b.n	80019b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80019b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000

080019c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d141      	bne.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019d2:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019de:	d131      	bne.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e0:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019e6:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f0:	4b43      	ldr	r3, [pc, #268]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f8:	4a41      	ldr	r2, [pc, #260]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a00:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2232      	movs	r2, #50	; 0x32
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	4a3f      	ldr	r2, [pc, #252]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0c9b      	lsrs	r3, r3, #18
 8001a12:	3301      	adds	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a16:	e002      	b.n	8001a1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2a:	d102      	bne.n	8001a32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f2      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3e:	d158      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e057      	b.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a44:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a4a:	4a2d      	ldr	r2, [pc, #180]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a54:	e04d      	b.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a5c:	d141      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6a:	d131      	bne.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a72:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2232      	movs	r2, #50	; 0x32
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	0c9b      	lsrs	r3, r3, #18
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa2:	e002      	b.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab6:	d102      	bne.n	8001abe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f2      	bne.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aca:	d112      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e011      	b.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ae0:	e007      	b.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40007000 	.word	0x40007000
 8001b04:	20000008 	.word	0x20000008
 8001b08:	431bde83 	.word	0x431bde83

08001b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f000 bc08 	b.w	8002330 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b20:	4b96      	ldr	r3, [pc, #600]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2a:	4b94      	ldr	r3, [pc, #592]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80e4 	beq.w	8001d0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4c>
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2b0c      	cmp	r3, #12
 8001b4c:	f040 808b 	bne.w	8001c66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f040 8087 	bne.w	8001c66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b58:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_RCC_OscConfig+0x64>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e3df      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1a      	ldr	r2, [r3, #32]
 8001b74:	4b81      	ldr	r3, [pc, #516]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_RCC_OscConfig+0x7e>
 8001b80:	4b7e      	ldr	r3, [pc, #504]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b88:	e005      	b.n	8001b96 <HAL_RCC_OscConfig+0x8a>
 8001b8a:	4b7c      	ldr	r3, [pc, #496]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d223      	bcs.n	8001be2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fd94 	bl	80026cc <RCC_SetFlashLatencyFromMSIRange>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e3c0      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bae:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a72      	ldr	r2, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f043 0308 	orr.w	r3, r3, #8
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	496d      	ldr	r1, [pc, #436]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bcc:	4b6b      	ldr	r3, [pc, #428]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	4968      	ldr	r1, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
 8001be0:	e025      	b.n	8001c2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be2:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a65      	ldr	r2, [pc, #404]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4960      	ldr	r1, [pc, #384]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c00:	4b5e      	ldr	r3, [pc, #376]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	495b      	ldr	r1, [pc, #364]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fd54 	bl	80026cc <RCC_SetFlashLatencyFromMSIRange>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e380      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c2e:	f000 fcc1 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b51      	ldr	r3, [pc, #324]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4950      	ldr	r1, [pc, #320]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a4e      	ldr	r2, [pc, #312]	; (8001d84 <HAL_RCC_OscConfig+0x278>)
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <HAL_RCC_OscConfig+0x27c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe faea 	bl	800022c <HAL_InitTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d052      	beq.n	8001d08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	e364      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d032      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a42      	ldr	r2, [pc, #264]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c7a:	f7fe fb27 	bl	80002cc <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c82:	f7fe fb23 	bl	80002cc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e34d      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c94:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a35      	ldr	r2, [pc, #212]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4930      	ldr	r1, [pc, #192]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	492b      	ldr	r1, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
 8001cd2:	e01a      	b.n	8001d0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce0:	f7fe faf4 	bl	80002cc <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce8:	f7fe faf0 	bl	80002cc <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e31a      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1dc>
 8001d06:	e000      	b.n	8001d0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d073      	beq.n	8001dfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x21c>
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d10e      	bne.n	8001d40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d10b      	bne.n	8001d40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d063      	beq.n	8001dfc <HAL_RCC_OscConfig+0x2f0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d15f      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e2f7      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d106      	bne.n	8001d58 <HAL_RCC_OscConfig+0x24c>
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e025      	b.n	8001da4 <HAL_RCC_OscConfig+0x298>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d60:	d114      	bne.n	8001d8c <HAL_RCC_OscConfig+0x280>
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a02      	ldr	r2, [pc, #8]	; (8001d7c <HAL_RCC_OscConfig+0x270>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e013      	b.n	8001da4 <HAL_RCC_OscConfig+0x298>
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003740 	.word	0x08003740
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	4ba0      	ldr	r3, [pc, #640]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a9f      	ldr	r2, [pc, #636]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b9d      	ldr	r3, [pc, #628]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a9c      	ldr	r2, [pc, #624]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7fe fa8e 	bl	80002cc <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7fe fa8a 	bl	80002cc <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e2b4      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dc6:	4b92      	ldr	r3, [pc, #584]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x2a8>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fa7a 	bl	80002cc <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7fe fa76 	bl	80002cc <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e2a0      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dee:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2d0>
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d060      	beq.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_OscConfig+0x310>
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d119      	bne.n	8001e4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d116      	bne.n	8001e4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1c:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_OscConfig+0x328>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e27d      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b76      	ldr	r3, [pc, #472]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	4973      	ldr	r1, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e48:	e040      	b.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d023      	beq.n	8001e9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e52:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6e      	ldr	r2, [pc, #440]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fa35 	bl	80002cc <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7fe fa31 	bl	80002cc <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e25b      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e78:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	495f      	ldr	r1, [pc, #380]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
 8001e98:	e018      	b.n	8001ecc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a5c      	ldr	r2, [pc, #368]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fa11 	bl	80002cc <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eae:	f7fe fa0d 	bl	80002cc <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e237      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec0:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d03c      	beq.n	8001f52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01c      	beq.n	8001f1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee6:	4a4a      	ldr	r2, [pc, #296]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7fe f9ec 	bl	80002cc <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe f9e8 	bl	80002cc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e212      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ef      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x3ec>
 8001f18:	e01b      	b.n	8001f52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f20:	4a3b      	ldr	r2, [pc, #236]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7fe f9cf 	bl	80002cc <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f32:	f7fe f9cb 	bl	80002cc <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e1f5      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f44:	4b32      	ldr	r3, [pc, #200]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ef      	bne.n	8001f32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80a6 	beq.w	80020ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f64:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d118      	bne.n	8001fca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa4:	f7fe f992 	bl	80002cc <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fac:	f7fe f98e 	bl	80002cc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1b8      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4d8>
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe2:	e029      	b.n	8002038 <HAL_RCC_OscConfig+0x52c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d115      	bne.n	8002018 <HAL_RCC_OscConfig+0x50c>
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_RCC_OscConfig+0x504>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800200c:	e014      	b.n	8002038 <HAL_RCC_OscConfig+0x52c>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	4b9d      	ldr	r3, [pc, #628]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	4a9c      	ldr	r2, [pc, #624]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002028:	4b99      	ldr	r3, [pc, #612]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	4a98      	ldr	r2, [pc, #608]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d016      	beq.n	800206e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7fe f944 	bl	80002cc <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7fe f940 	bl	80002cc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e168      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205e:	4b8c      	ldr	r3, [pc, #560]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ed      	beq.n	8002048 <HAL_RCC_OscConfig+0x53c>
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe f92d 	bl	80002cc <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe f929 	bl	80002cc <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e151      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800208c:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ed      	bne.n	8002076 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4a7a      	ldr	r2, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80020a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d03c      	beq.n	8002132 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01c      	beq.n	80020fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020c0:	4b73      	ldr	r3, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80020c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c6:	4a72      	ldr	r2, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe f8fc 	bl	80002cc <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d8:	f7fe f8f8 	bl	80002cc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e122      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ea:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80020ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ef      	beq.n	80020d8 <HAL_RCC_OscConfig+0x5cc>
 80020f8:	e01b      	b.n	8002132 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020fa:	4b65      	ldr	r3, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80020fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002100:	4a63      	ldr	r2, [pc, #396]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe f8df 	bl	80002cc <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002112:	f7fe f8db 	bl	80002cc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e105      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002124:	4b5a      	ldr	r3, [pc, #360]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ef      	bne.n	8002112 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80f9 	beq.w	800232e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	2b02      	cmp	r3, #2
 8002142:	f040 80cf 	bne.w	80022e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002146:	4b52      	ldr	r3, [pc, #328]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0203 	and.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	429a      	cmp	r2, r3
 8002158:	d12c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	3b01      	subs	r3, #1
 8002166:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	429a      	cmp	r2, r3
 800216a:	d123      	bne.n	80021b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d11b      	bne.n	80021b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002186:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d113      	bne.n	80021b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	3b01      	subs	r3, #1
 800219a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d109      	bne.n	80021b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	085b      	lsrs	r3, r3, #1
 80021ac:	3b01      	subs	r3, #1
 80021ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d071      	beq.n	8002298 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d068      	beq.n	800228c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021ba:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d105      	bne.n	80021d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0ac      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80021dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021e2:	f7fe f873 	bl	80002cc <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe f86f 	bl	80002cc <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e099      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <HAL_RCC_OscConfig+0x788>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002218:	3a01      	subs	r2, #1
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002222:	0212      	lsls	r2, r2, #8
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800222a:	0852      	lsrs	r2, r2, #1
 800222c:	3a01      	subs	r2, #1
 800222e:	0552      	lsls	r2, r2, #21
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002236:	0852      	lsrs	r2, r2, #1
 8002238:	3a01      	subs	r2, #1
 800223a:	0652      	lsls	r2, r2, #25
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002242:	06d2      	lsls	r2, r2, #27
 8002244:	430a      	orrs	r2, r1
 8002246:	4912      	ldr	r1, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002248:	4313      	orrs	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002264:	f7fe f832 	bl	80002cc <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe f82e 	bl	80002cc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e058      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_RCC_OscConfig+0x784>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800228a:	e050      	b.n	800232e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e04f      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
 8002290:	40021000 	.word	0x40021000
 8002294:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d144      	bne.n	800232e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022a4:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a20      	ldr	r2, [pc, #128]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 80022b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022bc:	f7fe f806 	bl	80002cc <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe f802 	bl	80002cc <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e02c      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x7b8>
 80022e2:	e024      	b.n	800232e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d01f      	beq.n	800232a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 80022f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fd ffe9 	bl	80002cc <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fd ffe5 	bl	80002cc <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e00f      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002310:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4905      	ldr	r1, [pc, #20]	; (8002338 <HAL_RCC_OscConfig+0x82c>)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x830>)
 8002324:	4013      	ands	r3, r2
 8002326:	60cb      	str	r3, [r1, #12]
 8002328:	e001      	b.n	800232e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	feeefffc 	.word	0xfeeefffc

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e11d      	b.n	8002594 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b90      	ldr	r3, [pc, #576]	; (800259c <HAL_RCC_ClockConfig+0x25c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d910      	bls.n	8002388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b8d      	ldr	r3, [pc, #564]	; (800259c <HAL_RCC_ClockConfig+0x25c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 020f 	bic.w	r2, r3, #15
 800236e:	498b      	ldr	r1, [pc, #556]	; (800259c <HAL_RCC_ClockConfig+0x25c>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCC_ClockConfig+0x25c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e105      	b.n	8002594 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d010      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d908      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b7e      	ldr	r3, [pc, #504]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	497b      	ldr	r1, [pc, #492]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d079      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d11e      	bne.n	8002408 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	4b75      	ldr	r3, [pc, #468]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0dc      	b.n	8002594 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80023da:	f000 f9d1 	bl	8002780 <RCC_GetSysClockFreqFromPLLSource>
 80023de:	4603      	mov	r3, r0
 80023e0:	4a70      	ldr	r2, [pc, #448]	; (80025a4 <HAL_RCC_ClockConfig+0x264>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d946      	bls.n	8002474 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023e6:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d140      	bne.n	8002474 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023f2:	4b6b      	ldr	r3, [pc, #428]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023fa:	4a69      	ldr	r2, [pc, #420]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002400:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e035      	b.n	8002474 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002410:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d115      	bne.n	8002448 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0b9      	b.n	8002594 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002428:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0ad      	b.n	8002594 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0a5      	b.n	8002594 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002448:	f000 f8b4 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800244c:	4603      	mov	r3, r0
 800244e:	4a55      	ldr	r2, [pc, #340]	; (80025a4 <HAL_RCC_ClockConfig+0x264>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d90f      	bls.n	8002474 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002454:	4b52      	ldr	r3, [pc, #328]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002468:	4a4d      	ldr	r2, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 800246a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800246e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002474:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 0203 	bic.w	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4947      	ldr	r1, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002486:	f7fd ff21 	bl	80002cc <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248e:	f7fd ff1d 	bl	80002cc <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e077      	b.n	8002594 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 020c 	and.w	r2, r3, #12
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d1eb      	bne.n	800248e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b80      	cmp	r3, #128	; 0x80
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024bc:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a37      	ldr	r2, [pc, #220]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024c6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d010      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d208      	bcs.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	492b      	ldr	r1, [pc, #172]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_ClockConfig+0x25c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d210      	bcs.n	8002526 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_ClockConfig+0x25c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 020f 	bic.w	r2, r3, #15
 800250c:	4923      	ldr	r1, [pc, #140]	; (800259c <HAL_RCC_ClockConfig+0x25c>)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_RCC_ClockConfig+0x25c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d001      	beq.n	8002526 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e036      	b.n	8002594 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4918      	ldr	r1, [pc, #96]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4910      	ldr	r1, [pc, #64]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002564:	f000 f826 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_RCC_ClockConfig+0x260>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <HAL_RCC_ClockConfig+0x268>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_RCC_ClockConfig+0x26c>)
 8002582:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_RCC_ClockConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd fe4f 	bl	800022c <HAL_InitTick>
 800258e:	4603      	mov	r3, r0
 8002590:	73fb      	strb	r3, [r7, #15]

  return status;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	04c4b400 	.word	0x04c4b400
 80025a8:	08003740 	.word	0x08003740
 80025ac:	20000008 	.word	0x20000008
 80025b0:	20000000 	.word	0x20000000

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x34>
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d121      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d11e      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025f4:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e005      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002610:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10d      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002624:	e00a      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d102      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e004      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d101      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800263a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d134      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0xa6>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d003      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0xac>
 8002658:	e005      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800265c:	617b      	str	r3, [r7, #20]
      break;
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002662:	617b      	str	r3, [r7, #20]
      break;
 8002664:	e002      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	617b      	str	r3, [r7, #20]
      break;
 800266a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3301      	adds	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	fb03 f202 	mul.w	r2, r3, r2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	0e5b      	lsrs	r3, r3, #25
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	3301      	adds	r3, #1
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026ac:	69bb      	ldr	r3, [r7, #24]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	08003750 	.word	0x08003750
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026e4:	f7ff f94e 	bl	8001984 <HAL_PWREx_GetVoltageRange>
 80026e8:	6178      	str	r0, [r7, #20]
 80026ea:	e014      	b.n	8002716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	4a21      	ldr	r2, [pc, #132]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f6:	6593      	str	r3, [r2, #88]	; 0x58
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002704:	f7ff f93e 	bl	8001984 <HAL_PWREx_GetVoltageRange>
 8002708:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002714:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800271c:	d10b      	bne.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d913      	bls.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2ba0      	cmp	r3, #160	; 0xa0
 8002728:	d902      	bls.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800272a:	2302      	movs	r3, #2
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	e00d      	b.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002730:	2301      	movs	r3, #1
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e00a      	b.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b7f      	cmp	r3, #127	; 0x7f
 800273a:	d902      	bls.n	8002742 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800273c:	2302      	movs	r3, #2
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	e004      	b.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b70      	cmp	r3, #112	; 0x70
 8002746:	d101      	bne.n	800274c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002748:	2301      	movs	r3, #1
 800274a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 020f 	bic.w	r2, r3, #15
 8002754:	4909      	ldr	r1, [pc, #36]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	429a      	cmp	r2, r3
 8002768:	d001      	beq.n	800276e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	40022000 	.word	0x40022000

08002780 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d00b      	beq.n	80027ae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d825      	bhi.n	80027e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d008      	beq.n	80027b4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d11f      	bne.n	80027e8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80027aa:	613b      	str	r3, [r7, #16]
    break;
 80027ac:	e01f      	b.n	80027ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80027b0:	613b      	str	r3, [r7, #16]
    break;
 80027b2:	e01c      	b.n	80027ee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d107      	bne.n	80027d0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027c0:	4b1e      	ldr	r3, [pc, #120]	; (800283c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e005      	b.n	80027dc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80027dc:	4a1a      	ldr	r2, [pc, #104]	; (8002848 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e4:	613b      	str	r3, [r7, #16]
    break;
 80027e6:	e002      	b.n	80027ee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
    break;
 80027ec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	3301      	adds	r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	fb03 f202 	mul.w	r2, r3, r2
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	0e5b      	lsrs	r3, r3, #25
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	3301      	adds	r3, #1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800282e:	683b      	ldr	r3, [r7, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40021000 	.word	0x40021000
 8002840:	00f42400 	.word	0x00f42400
 8002844:	007a1200 	.word	0x007a1200
 8002848:	08003750 	.word	0x08003750

0800284c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002854:	2300      	movs	r3, #0
 8002856:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002858:	2300      	movs	r3, #0
 800285a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002864:	2b00      	cmp	r3, #0
 8002866:	d040      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d02a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d825      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002874:	2b60      	cmp	r3, #96	; 0x60
 8002876:	d026      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002878:	2b60      	cmp	r3, #96	; 0x60
 800287a:	d821      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d006      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d81d      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002888:	2b20      	cmp	r3, #32
 800288a:	d010      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800288c:	e018      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800288e:	4b89      	ldr	r3, [pc, #548]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4a88      	ldr	r2, [pc, #544]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800289a:	e015      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fb02 	bl	8002eac <RCCEx_PLLSAI1_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ac:	e00c      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3320      	adds	r3, #32
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fbed 	bl	8003094 <RCCEx_PLLSAI2_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028be:	e003      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	74fb      	strb	r3, [r7, #19]
      break;
 80028c4:	e000      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80028c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028ce:	4b79      	ldr	r3, [pc, #484]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028d4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028dc:	4975      	ldr	r1, [pc, #468]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80028e4:	e001      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d047      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d030      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002904:	d82a      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800290a:	d02a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800290c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002910:	d824      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002916:	d008      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800291c:	d81e      	bhi.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002926:	d010      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002928:	e018      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800292a:	4b62      	ldr	r3, [pc, #392]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4a61      	ldr	r2, [pc, #388]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002936:	e015      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3304      	adds	r3, #4
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fab4 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002948:	e00c      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3320      	adds	r3, #32
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fb9f 	bl	8003094 <RCCEx_PLLSAI2_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800295a:	e003      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	74fb      	strb	r3, [r7, #19]
      break;
 8002960:	e000      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002962:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800296a:	4b52      	ldr	r3, [pc, #328]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800296c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	494e      	ldr	r1, [pc, #312]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002980:	e001      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002982:	7cfb      	ldrb	r3, [r7, #19]
 8002984:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 809f 	beq.w	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002994:	2300      	movs	r3, #0
 8002996:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	4a40      	ldr	r2, [pc, #256]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6593      	str	r3, [r2, #88]	; 0x58
 80029ba:	4b3e      	ldr	r3, [pc, #248]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029d6:	f7fd fc79 	bl	80002cc <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029dc:	e009      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fd fc75 	bl	80002cc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d902      	bls.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	74fb      	strb	r3, [r7, #19]
        break;
 80029f0:	e005      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ef      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d15b      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01f      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d019      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a22:	4b24      	ldr	r3, [pc, #144]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a4e:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d016      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fd fc34 	bl	80002cc <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a66:	e00b      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a68:	f7fd fc30 	bl	80002cc <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d902      	bls.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	74fb      	strb	r3, [r7, #19]
            break;
 8002a7e:	e006      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a80:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ec      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10c      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002aac:	e008      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aae:	7cfb      	ldrb	r3, [r7, #19]
 8002ab0:	74bb      	strb	r3, [r7, #18]
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac0:	7c7b      	ldrb	r3, [r7, #17]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4ba0      	ldr	r3, [pc, #640]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	4a9f      	ldr	r2, [pc, #636]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ade:	4b9a      	ldr	r3, [pc, #616]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f023 0203 	bic.w	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	4996      	ldr	r1, [pc, #600]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b00:	4b91      	ldr	r3, [pc, #580]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f023 020c 	bic.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	498e      	ldr	r1, [pc, #568]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	4985      	ldr	r1, [pc, #532]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b44:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	497d      	ldr	r1, [pc, #500]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b66:	4b78      	ldr	r3, [pc, #480]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	4974      	ldr	r1, [pc, #464]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b88:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b96:	496c      	ldr	r1, [pc, #432]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb8:	4963      	ldr	r1, [pc, #396]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bcc:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bda:	495b      	ldr	r1, [pc, #364]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bee:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	4952      	ldr	r1, [pc, #328]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c10:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	494a      	ldr	r1, [pc, #296]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c32:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	4941      	ldr	r1, [pc, #260]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c54:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c62:	4939      	ldr	r1, [pc, #228]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c84:	4930      	ldr	r1, [pc, #192]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c94:	d106      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	4a2b      	ldr	r2, [pc, #172]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca0:	60d3      	str	r3, [r2, #12]
 8002ca2:	e011      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f8f9 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d04d      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002cde:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002cee:	e012      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002cf0:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cf6:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0e:	490e      	ldr	r1, [pc, #56]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d2a:	60d3      	str	r3, [r2, #12]
 8002d2c:	e020      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d36:	d109      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a02      	ldr	r2, [pc, #8]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d42:	60d3      	str	r3, [r2, #12]
 8002d44:	e014      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d54:	d10c      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 f8a5 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d66:	7cfb      	ldrb	r3, [r7, #19]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d028      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8a:	4947      	ldr	r1, [pc, #284]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9a:	d106      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9c:	4b42      	ldr	r3, [pc, #264]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a41      	ldr	r2, [pc, #260]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da6:	60d3      	str	r3, [r2, #12]
 8002da8:	e011      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db2:	d10c      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f876 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d01e      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dda:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dea:	492f      	ldr	r1, [pc, #188]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2102      	movs	r1, #2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f851 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00b      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e24:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e2a:	f023 0204 	bic.w	r2, r3, #4
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e34:	491c      	ldr	r1, [pc, #112]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e48:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e4e:	f023 0218 	bic.w	r2, r3, #24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	4913      	ldr	r1, [pc, #76]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7c:	490a      	ldr	r1, [pc, #40]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000

08002eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eba:	4b72      	ldr	r3, [pc, #456]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00e      	beq.n	8002ee4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0203 	and.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d103      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d142      	bne.n	8002f64 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e03f      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d018      	beq.n	8002f1e <RCCEx_PLLSAI1_Config+0x72>
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d825      	bhi.n	8002f3c <RCCEx_PLLSAI1_Config+0x90>
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d002      	beq.n	8002efa <RCCEx_PLLSAI1_Config+0x4e>
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d009      	beq.n	8002f0c <RCCEx_PLLSAI1_Config+0x60>
 8002ef8:	e020      	b.n	8002f3c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11d      	bne.n	8002f42 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0a:	e01a      	b.n	8002f42 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f0c:	4b5d      	ldr	r3, [pc, #372]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d116      	bne.n	8002f46 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1c:	e013      	b.n	8002f46 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f1e:	4b59      	ldr	r3, [pc, #356]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10f      	bne.n	8002f4a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f2a:	4b56      	ldr	r3, [pc, #344]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f3a:	e006      	b.n	8002f4a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f40:	e004      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002f4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002f52:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4949      	ldr	r1, [pc, #292]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 8086 	bne.w	8003078 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f6c:	4b45      	ldr	r3, [pc, #276]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a44      	ldr	r2, [pc, #272]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f78:	f7fd f9a8 	bl	80002cc <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f7e:	e009      	b.n	8002f94 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f80:	f7fd f9a4 	bl	80002cc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d902      	bls.n	8002f94 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	73fb      	strb	r3, [r7, #15]
        break;
 8002f92:	e005      	b.n	8002fa0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ef      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d168      	bne.n	8003078 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d113      	bne.n	8002fd4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	4b35      	ldr	r3, [pc, #212]	; (8003088 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6892      	ldr	r2, [r2, #8]
 8002fb8:	0211      	lsls	r1, r2, #8
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68d2      	ldr	r2, [r2, #12]
 8002fbe:	06d2      	lsls	r2, r2, #27
 8002fc0:	4311      	orrs	r1, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6852      	ldr	r2, [r2, #4]
 8002fc6:	3a01      	subs	r2, #1
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	492d      	ldr	r1, [pc, #180]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	610b      	str	r3, [r1, #16]
 8002fd2:	e02d      	b.n	8003030 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d115      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6892      	ldr	r2, [r2, #8]
 8002fe6:	0211      	lsls	r1, r2, #8
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6912      	ldr	r2, [r2, #16]
 8002fec:	0852      	lsrs	r2, r2, #1
 8002fee:	3a01      	subs	r2, #1
 8002ff0:	0552      	lsls	r2, r2, #21
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6852      	ldr	r2, [r2, #4]
 8002ff8:	3a01      	subs	r2, #1
 8002ffa:	0112      	lsls	r2, r2, #4
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	4921      	ldr	r1, [pc, #132]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	610b      	str	r3, [r1, #16]
 8003004:	e014      	b.n	8003030 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	4b21      	ldr	r3, [pc, #132]	; (8003090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300c:	4013      	ands	r3, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	0211      	lsls	r1, r2, #8
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6952      	ldr	r2, [r2, #20]
 8003018:	0852      	lsrs	r2, r2, #1
 800301a:	3a01      	subs	r2, #1
 800301c:	0652      	lsls	r2, r2, #25
 800301e:	4311      	orrs	r1, r2
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6852      	ldr	r2, [r2, #4]
 8003024:	3a01      	subs	r2, #1
 8003026:	0112      	lsls	r2, r2, #4
 8003028:	430a      	orrs	r2, r1
 800302a:	4916      	ldr	r1, [pc, #88]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a13      	ldr	r2, [pc, #76]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003036:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800303a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fd f946 	bl	80002cc <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003042:	e009      	b.n	8003058 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003044:	f7fd f942 	bl	80002cc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d902      	bls.n	8003058 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	73fb      	strb	r3, [r7, #15]
          break;
 8003056:	e005      	b.n	8003064 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ef      	beq.n	8003044 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	4904      	ldr	r1, [pc, #16]	; (8003084 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	07ff800f 	.word	0x07ff800f
 800308c:	ff9f800f 	.word	0xff9f800f
 8003090:	f9ff800f 	.word	0xf9ff800f

08003094 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030a2:	4b72      	ldr	r3, [pc, #456]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00e      	beq.n	80030cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030ae:	4b6f      	ldr	r3, [pc, #444]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0203 	and.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d103      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
       ||
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d142      	bne.n	800314c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e03f      	b.n	800314c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d018      	beq.n	8003106 <RCCEx_PLLSAI2_Config+0x72>
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d825      	bhi.n	8003124 <RCCEx_PLLSAI2_Config+0x90>
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d002      	beq.n	80030e2 <RCCEx_PLLSAI2_Config+0x4e>
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d009      	beq.n	80030f4 <RCCEx_PLLSAI2_Config+0x60>
 80030e0:	e020      	b.n	8003124 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030e2:	4b62      	ldr	r3, [pc, #392]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11d      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f2:	e01a      	b.n	800312a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f4:	4b5d      	ldr	r3, [pc, #372]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003104:	e013      	b.n	800312e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003106:	4b59      	ldr	r3, [pc, #356]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10f      	bne.n	8003132 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003112:	4b56      	ldr	r3, [pc, #344]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003122:	e006      	b.n	8003132 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      break;
 8003128:	e004      	b.n	8003134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800312a:	bf00      	nop
 800312c:	e002      	b.n	8003134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800312e:	bf00      	nop
 8003130:	e000      	b.n	8003134 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003132:	bf00      	nop
    }

    if(status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800313a:	4b4c      	ldr	r3, [pc, #304]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4949      	ldr	r1, [pc, #292]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003148:	4313      	orrs	r3, r2
 800314a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 8086 	bne.w	8003260 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003154:	4b45      	ldr	r3, [pc, #276]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a44      	ldr	r2, [pc, #272]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 800315a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800315e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003160:	f7fd f8b4 	bl	80002cc <HAL_GetTick>
 8003164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003166:	e009      	b.n	800317c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003168:	f7fd f8b0 	bl	80002cc <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d902      	bls.n	800317c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	73fb      	strb	r3, [r7, #15]
        break;
 800317a:	e005      	b.n	8003188 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800317c:	4b3b      	ldr	r3, [pc, #236]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ef      	bne.n	8003168 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d168      	bne.n	8003260 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d113      	bne.n	80031bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003194:	4b35      	ldr	r3, [pc, #212]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <RCCEx_PLLSAI2_Config+0x1dc>)
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6892      	ldr	r2, [r2, #8]
 80031a0:	0211      	lsls	r1, r2, #8
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68d2      	ldr	r2, [r2, #12]
 80031a6:	06d2      	lsls	r2, r2, #27
 80031a8:	4311      	orrs	r1, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6852      	ldr	r2, [r2, #4]
 80031ae:	3a01      	subs	r2, #1
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	430a      	orrs	r2, r1
 80031b4:	492d      	ldr	r1, [pc, #180]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	614b      	str	r3, [r1, #20]
 80031ba:	e02d      	b.n	8003218 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d115      	bne.n	80031ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <RCCEx_PLLSAI2_Config+0x1e0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6892      	ldr	r2, [r2, #8]
 80031ce:	0211      	lsls	r1, r2, #8
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6912      	ldr	r2, [r2, #16]
 80031d4:	0852      	lsrs	r2, r2, #1
 80031d6:	3a01      	subs	r2, #1
 80031d8:	0552      	lsls	r2, r2, #21
 80031da:	4311      	orrs	r1, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6852      	ldr	r2, [r2, #4]
 80031e0:	3a01      	subs	r2, #1
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	430a      	orrs	r2, r1
 80031e6:	4921      	ldr	r1, [pc, #132]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	614b      	str	r3, [r1, #20]
 80031ec:	e014      	b.n	8003218 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	4b21      	ldr	r3, [pc, #132]	; (8003278 <RCCEx_PLLSAI2_Config+0x1e4>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6892      	ldr	r2, [r2, #8]
 80031fa:	0211      	lsls	r1, r2, #8
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6952      	ldr	r2, [r2, #20]
 8003200:	0852      	lsrs	r2, r2, #1
 8003202:	3a01      	subs	r2, #1
 8003204:	0652      	lsls	r2, r2, #25
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6852      	ldr	r2, [r2, #4]
 800320c:	3a01      	subs	r2, #1
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	430a      	orrs	r2, r1
 8003212:	4916      	ldr	r1, [pc, #88]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fd f852 	bl	80002cc <HAL_GetTick>
 8003228:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800322a:	e009      	b.n	8003240 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800322c:	f7fd f84e 	bl	80002cc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d902      	bls.n	8003240 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	73fb      	strb	r3, [r7, #15]
          break;
 800323e:	e005      	b.n	800324c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ef      	beq.n	800322c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	4904      	ldr	r1, [pc, #16]	; (800326c <RCCEx_PLLSAI2_Config+0x1d8>)
 800325c:	4313      	orrs	r3, r2
 800325e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	07ff800f 	.word	0x07ff800f
 8003274:	ff9f800f 	.word	0xff9f800f
 8003278:	f9ff800f 	.word	0xf9ff800f

0800327c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003282:	f7fc ffbb 	bl	80001fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003286:	f000 f847 	bl	8003318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800328a:	f000 f8fd 	bl	8003488 <MX_GPIO_Init>
  MX_ADC1_Init();
 800328e:	f000 f895 	bl	80033bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  char status = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
  HAL_ADC_Start(&hadc1);
 8003296:	481c      	ldr	r0, [pc, #112]	; (8003308 <main+0x8c>)
 8003298:	f7fd fb4a 	bl	8000930 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin);
 800329c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032a0:	481a      	ldr	r0, [pc, #104]	; (800330c <main+0x90>)
 80032a2:	f7fe fb3f 	bl	8001924 <HAL_GPIO_ReadPin>
 80032a6:	4603      	mov	r3, r0
 80032a8:	73fb      	strb	r3, [r7, #15]
	  if (status == 0){
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <main+0x42>
	  HAL_GPIO_WritePin(myLED_GPIO_Port, myLED_Pin, GPIO_PIN_SET);
 80032b0:	2201      	movs	r2, #1
 80032b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032b6:	4816      	ldr	r0, [pc, #88]	; (8003310 <main+0x94>)
 80032b8:	f7fe fb4c 	bl	8001954 <HAL_GPIO_WritePin>
 80032bc:	e005      	b.n	80032ca <main+0x4e>
	  }else{
	  HAL_GPIO_WritePin(myLED_GPIO_Port, myLED_Pin, GPIO_PIN_RESET);
 80032be:	2200      	movs	r2, #0
 80032c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032c4:	4812      	ldr	r0, [pc, #72]	; (8003310 <main+0x94>)
 80032c6:	f7fe fb45 	bl	8001954 <HAL_GPIO_WritePin>
	  }

	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80032ca:	f04f 31ff 	mov.w	r1, #4294967295
 80032ce:	480e      	ldr	r0, [pc, #56]	; (8003308 <main+0x8c>)
 80032d0:	f7fd fb91 	bl	80009f6 <HAL_ADC_PollForConversion>
	  raw_vref = HAL_ADC_GetValue(&hadc1);
 80032d4:	480c      	ldr	r0, [pc, #48]	; (8003308 <main+0x8c>)
 80032d6:	f7fd fc1d 	bl	8000b14 <HAL_ADC_GetValue>
 80032da:	ee07 0a90 	vmov	s15, r0
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	edc7 7a02 	vstr	s15, [r7, #8]
	  vref = 3.0 * ((*VREFINT)/raw_vref));
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <main+0x98>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80032f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032fa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80032fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003302:	edc7 7a01 	vstr	s15, [r7, #4]
	  status = HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin);
 8003306:	e7c9      	b.n	800329c <main+0x20>
 8003308:	2000002c 	.word	0x2000002c
 800330c:	48000800 	.word	0x48000800
 8003310:	48000400 	.word	0x48000400
 8003314:	1fff75aa 	.word	0x1fff75aa

08003318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b096      	sub	sp, #88	; 0x58
 800331c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	2244      	movs	r2, #68	; 0x44
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f9f6 	bl	8003718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800332c:	463b      	mov	r3, r7
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
 8003338:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800333a:	2000      	movs	r0, #0
 800333c:	f7fe fb42 	bl	80019c4 <HAL_PWREx_ControlVoltageScaling>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8003346:	f000 f8ef 	bl	8003528 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800334a:	2310      	movs	r3, #16
 800334c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800334e:	2301      	movs	r3, #1
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003356:	2360      	movs	r3, #96	; 0x60
 8003358:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800335a:	2302      	movs	r3, #2
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800335e:	2301      	movs	r3, #1
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003362:	2301      	movs	r3, #1
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003366:	233c      	movs	r3, #60	; 0x3c
 8003368:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800336a:	2302      	movs	r3, #2
 800336c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800336e:	2302      	movs	r3, #2
 8003370:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003372:	2302      	movs	r3, #2
 8003374:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fbc6 	bl	8001b0c <HAL_RCC_OscConfig>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003386:	f000 f8cf 	bl	8003528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800338a:	230f      	movs	r3, #15
 800338c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800338e:	2303      	movs	r3, #3
 8003390:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800339e:	463b      	mov	r3, r7
 80033a0:	2105      	movs	r1, #5
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe ffcc 	bl	8002340 <HAL_RCC_ClockConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80033ae:	f000 f8bb 	bl	8003528 <Error_Handler>
  }
}
 80033b2:	bf00      	nop
 80033b4:	3758      	adds	r7, #88	; 0x58
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033c2:	463b      	mov	r3, r7
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
 80033d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80033d2:	4b2a      	ldr	r3, [pc, #168]	; (800347c <MX_ADC1_Init+0xc0>)
 80033d4:	4a2a      	ldr	r2, [pc, #168]	; (8003480 <MX_ADC1_Init+0xc4>)
 80033d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <MX_ADC1_Init+0xc0>)
 80033da:	2200      	movs	r2, #0
 80033dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033de:	4b27      	ldr	r3, [pc, #156]	; (800347c <MX_ADC1_Init+0xc0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033e4:	4b25      	ldr	r3, [pc, #148]	; (800347c <MX_ADC1_Init+0xc0>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <MX_ADC1_Init+0xc0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <MX_ADC1_Init+0xc0>)
 80033f2:	2204      	movs	r2, #4
 80033f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80033f6:	4b21      	ldr	r3, [pc, #132]	; (800347c <MX_ADC1_Init+0xc0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80033fc:	4b1f      	ldr	r3, [pc, #124]	; (800347c <MX_ADC1_Init+0xc0>)
 80033fe:	2200      	movs	r2, #0
 8003400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003402:	4b1e      	ldr	r3, [pc, #120]	; (800347c <MX_ADC1_Init+0xc0>)
 8003404:	2201      	movs	r2, #1
 8003406:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003408:	4b1c      	ldr	r3, [pc, #112]	; (800347c <MX_ADC1_Init+0xc0>)
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <MX_ADC1_Init+0xc0>)
 8003412:	2200      	movs	r2, #0
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <MX_ADC1_Init+0xc0>)
 8003418:	2200      	movs	r2, #0
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800341c:	4b17      	ldr	r3, [pc, #92]	; (800347c <MX_ADC1_Init+0xc0>)
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003424:	4b15      	ldr	r3, [pc, #84]	; (800347c <MX_ADC1_Init+0xc0>)
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <MX_ADC1_Init+0xc0>)
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <MX_ADC1_Init+0xc0>)
 8003434:	2204      	movs	r2, #4
 8003436:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003438:	4810      	ldr	r0, [pc, #64]	; (800347c <MX_ADC1_Init+0xc0>)
 800343a:	f7fd f92d 	bl	8000698 <HAL_ADC_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003444:	f000 f870 	bl	8003528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <MX_ADC1_Init+0xc8>)
 800344a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800344c:	2306      	movs	r3, #6
 800344e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003454:	237f      	movs	r3, #127	; 0x7f
 8003456:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003458:	2304      	movs	r3, #4
 800345a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003460:	463b      	mov	r3, r7
 8003462:	4619      	mov	r1, r3
 8003464:	4805      	ldr	r0, [pc, #20]	; (800347c <MX_ADC1_Init+0xc0>)
 8003466:	f7fd fb63 	bl	8000b30 <HAL_ADC_ConfigChannel>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8003470:	f000 f85a 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	2000002c 	.word	0x2000002c
 8003480:	50040000 	.word	0x50040000
 8003484:	80000001 	.word	0x80000001

08003488 <MX_GPIO_Init>:
//	  {
//	    Error_Handler();
//	  }
//}
static void MX_GPIO_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	60da      	str	r2, [r3, #12]
 800349c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800349e:	4b1f      	ldr	r3, [pc, #124]	; (800351c <MX_GPIO_Init+0x94>)
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <MX_GPIO_Init+0x94>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <MX_GPIO_Init+0x94>)
 80034ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <MX_GPIO_Init+0x94>)
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <MX_GPIO_Init+0x94>)
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034c2:	4b16      	ldr	r3, [pc, #88]	; (800351c <MX_GPIO_Init+0x94>)
 80034c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLED_GPIO_Port, myLED_Pin, GPIO_PIN_RESET);
 80034ce:	2200      	movs	r2, #0
 80034d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034d4:	4812      	ldr	r0, [pc, #72]	; (8003520 <MX_GPIO_Init+0x98>)
 80034d6:	f7fe fa3d 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 80034da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	4619      	mov	r1, r3
 80034ee:	480d      	ldr	r0, [pc, #52]	; (8003524 <MX_GPIO_Init+0x9c>)
 80034f0:	f7fe f886 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLED_Pin */
  GPIO_InitStruct.Pin = myLED_Pin;
 80034f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fa:	2301      	movs	r3, #1
 80034fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLED_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	4619      	mov	r1, r3
 800350c:	4804      	ldr	r0, [pc, #16]	; (8003520 <MX_GPIO_Init+0x98>)
 800350e:	f7fe f877 	bl	8001600 <HAL_GPIO_Init>

}
 8003512:	bf00      	nop
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	48000400 	.word	0x48000400
 8003524:	48000800 	.word	0x48000800

08003528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800352c:	b672      	cpsid	i
}
 800352e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003530:	e7fe      	b.n	8003530 <Error_Handler+0x8>
	...

08003534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <HAL_MspInit+0x44>)
 800353c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353e:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_MspInit+0x44>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6613      	str	r3, [r2, #96]	; 0x60
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_MspInit+0x44>)
 8003548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_MspInit+0x44>)
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	4a08      	ldr	r2, [pc, #32]	; (8003578 <HAL_MspInit+0x44>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6593      	str	r3, [r2, #88]	; 0x58
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_MspInit+0x44>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b0a8      	sub	sp, #160	; 0xa0
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	2294      	movs	r2, #148	; 0x94
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f8c3 	bl	8003718 <memset>
  if(hadc->Instance==ADC1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a19      	ldr	r2, [pc, #100]	; (80035fc <HAL_ADC_MspInit+0x80>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d12b      	bne.n	80035f4 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800359c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80035a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80035aa:	2301      	movs	r3, #1
 80035ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80035ae:	2301      	movs	r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80035b2:	2318      	movs	r3, #24
 80035b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80035b6:	2302      	movs	r3, #2
 80035b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80035ba:	2302      	movs	r3, #2
 80035bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80035be:	2302      	movs	r3, #2
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80035c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff f93d 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80035d8:	f7ff ffa6 	bl	8003528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_ADC_MspInit+0x84>)
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	4a07      	ldr	r2, [pc, #28]	; (8003600 <HAL_ADC_MspInit+0x84>)
 80035e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_ADC_MspInit+0x84>)
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035f4:	bf00      	nop
 80035f6:	37a0      	adds	r7, #160	; 0xa0
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	50040000 	.word	0x50040000
 8003600:	40021000 	.word	0x40021000

08003604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003608:	e7fe      	b.n	8003608 <NMI_Handler+0x4>

0800360a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800360e:	e7fe      	b.n	800360e <HardFault_Handler+0x4>

08003610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <MemManage_Handler+0x4>

08003616 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <BusFault_Handler+0x4>

0800361c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <UsageFault_Handler+0x4>

08003622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003650:	f7fc fe28 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}

08003658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <SystemInit+0x20>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <SystemInit+0x20>)
 8003664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800367c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003680:	f7ff ffea 	bl	8003658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003684:	480c      	ldr	r0, [pc, #48]	; (80036b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003686:	490d      	ldr	r1, [pc, #52]	; (80036bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003688:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <LoopForever+0xe>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800369c:	4c0a      	ldr	r4, [pc, #40]	; (80036c8 <LoopForever+0x16>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036aa:	f000 f811 	bl	80036d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036ae:	f7ff fde5 	bl	800327c <main>

080036b2 <LoopForever>:

LoopForever:
    b LoopForever
 80036b2:	e7fe      	b.n	80036b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80036b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80036c0:	08003788 	.word	0x08003788
  ldr r2, =_sbss
 80036c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80036c8:	20000094 	.word	0x20000094

080036cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC1_IRQHandler>
	...

080036d0 <__libc_init_array>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	4d0d      	ldr	r5, [pc, #52]	; (8003708 <__libc_init_array+0x38>)
 80036d4:	4c0d      	ldr	r4, [pc, #52]	; (800370c <__libc_init_array+0x3c>)
 80036d6:	1b64      	subs	r4, r4, r5
 80036d8:	10a4      	asrs	r4, r4, #2
 80036da:	2600      	movs	r6, #0
 80036dc:	42a6      	cmp	r6, r4
 80036de:	d109      	bne.n	80036f4 <__libc_init_array+0x24>
 80036e0:	4d0b      	ldr	r5, [pc, #44]	; (8003710 <__libc_init_array+0x40>)
 80036e2:	4c0c      	ldr	r4, [pc, #48]	; (8003714 <__libc_init_array+0x44>)
 80036e4:	f000 f820 	bl	8003728 <_init>
 80036e8:	1b64      	subs	r4, r4, r5
 80036ea:	10a4      	asrs	r4, r4, #2
 80036ec:	2600      	movs	r6, #0
 80036ee:	42a6      	cmp	r6, r4
 80036f0:	d105      	bne.n	80036fe <__libc_init_array+0x2e>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f8:	4798      	blx	r3
 80036fa:	3601      	adds	r6, #1
 80036fc:	e7ee      	b.n	80036dc <__libc_init_array+0xc>
 80036fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003702:	4798      	blx	r3
 8003704:	3601      	adds	r6, #1
 8003706:	e7f2      	b.n	80036ee <__libc_init_array+0x1e>
 8003708:	08003780 	.word	0x08003780
 800370c:	08003780 	.word	0x08003780
 8003710:	08003780 	.word	0x08003780
 8003714:	08003784 	.word	0x08003784

08003718 <memset>:
 8003718:	4402      	add	r2, r0
 800371a:	4603      	mov	r3, r0
 800371c:	4293      	cmp	r3, r2
 800371e:	d100      	bne.n	8003722 <memset+0xa>
 8003720:	4770      	bx	lr
 8003722:	f803 1b01 	strb.w	r1, [r3], #1
 8003726:	e7f9      	b.n	800371c <memset+0x4>

08003728 <_init>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr

08003734 <_fini>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	bf00      	nop
 8003738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373a:	bc08      	pop	{r3}
 800373c:	469e      	mov	lr, r3
 800373e:	4770      	bx	lr
